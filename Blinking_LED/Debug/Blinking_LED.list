
Blinking_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dd4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001f5c  08001f5c  00011f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f8c  08001f8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f8c  08001f8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f8c  08001f8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f8c  08001f8c  00011f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f90  08001f90  00011f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c2b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e08  00000000  00000000  00023c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  00024a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000340  00000000  00000000  00024e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018dd0  00000000  00000000  00025178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004cc4  00000000  00000000  0003df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091e99  00000000  00000000  00042c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d4aa5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d28  00000000  00000000  000d4af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f44 	.word	0x08001f44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001f44 	.word	0x08001f44

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f956 	bl	800047c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f826 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f860 	bl	8000298 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80001d8:	2108      	movs	r1, #8
 80001da:	4810      	ldr	r0, [pc, #64]	; (800021c <main+0x54>)
 80001dc:	f000 fc48 	bl	8000a70 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80001e0:	2064      	movs	r0, #100	; 0x64
 80001e2:	f000 f9b1 	bl	8000548 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 80001e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ee:	f000 fc3f 	bl	8000a70 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80001f2:	2064      	movs	r0, #100	; 0x64
 80001f4:	f000 f9a8 	bl	8000548 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000200:	f000 fc36 	bl	8000a70 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000204:	2064      	movs	r0, #100	; 0x64
 8000206:	f000 f99f 	bl	8000548 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800020a:	2120      	movs	r1, #32
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <main+0x54>)
 800020e:	f000 fc2f 	bl	8000a70 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000212:	2064      	movs	r0, #100	; 0x64
 8000214:	f000 f998 	bl	8000548 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000218:	e7de      	b.n	80001d8 <main+0x10>
 800021a:	bf00      	nop
 800021c:	48000400 	.word	0x48000400

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fe80 	bl	8001f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	2310      	movs	r3, #16
 800024c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024e:	2300      	movs	r3, #0
 8000250:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fc24 	bl	8000aa4 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000262:	f000 f87b 	bl	800035c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026a:	2300      	movs	r3, #0
 800026c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fc4e 	bl	8001b20 <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028a:	f000 f867 	bl	800035c <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3740      	adds	r7, #64	; 0x40
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 030c 	add.w	r3, r7, #12
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b29      	ldr	r3, [pc, #164]	; (8000354 <MX_GPIO_Init+0xbc>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a28      	ldr	r2, [pc, #160]	; (8000354 <MX_GPIO_Init+0xbc>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b26      	ldr	r3, [pc, #152]	; (8000354 <MX_GPIO_Init+0xbc>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c2:	60bb      	str	r3, [r7, #8]
 80002c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b23      	ldr	r3, [pc, #140]	; (8000354 <MX_GPIO_Init+0xbc>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a22      	ldr	r2, [pc, #136]	; (8000354 <MX_GPIO_Init+0xbc>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b20      	ldr	r3, [pc, #128]	; (8000354 <MX_GPIO_Init+0xbc>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b1d      	ldr	r3, [pc, #116]	; (8000354 <MX_GPIO_Init+0xbc>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a1c      	ldr	r2, [pc, #112]	; (8000354 <MX_GPIO_Init+0xbc>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <MX_GPIO_Init+0xbc>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000300:	f000 fb9e 	bl	8000a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2128      	movs	r1, #40	; 0x28
 8000308:	4813      	ldr	r0, [pc, #76]	; (8000358 <MX_GPIO_Init+0xc0>)
 800030a:	f000 fb99 	bl	8000a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800030e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	2301      	movs	r3, #1
 8000316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031c:	2300      	movs	r3, #0
 800031e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000320:	f107 030c 	add.w	r3, r7, #12
 8000324:	4619      	mov	r1, r3
 8000326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032a:	f000 fa17 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800032e:	2328      	movs	r3, #40	; 0x28
 8000330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2301      	movs	r3, #1
 8000334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033e:	f107 030c 	add.w	r3, r7, #12
 8000342:	4619      	mov	r1, r3
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_GPIO_Init+0xc0>)
 8000346:	f000 fa09 	bl	800075c <HAL_GPIO_Init>

}
 800034a:	bf00      	nop
 800034c:	3720      	adds	r7, #32
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000
 8000358:	48000400 	.word	0x48000400

0800035c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000360:	b672      	cpsid	i
}
 8000362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000364:	e7fe      	b.n	8000364 <Error_Handler+0x8>
	...

08000368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <HAL_MspInit+0x44>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <HAL_MspInit+0x44>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <HAL_MspInit+0x44>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <HAL_MspInit+0x44>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	4a08      	ldr	r2, [pc, #32]	; (80003ac <HAL_MspInit+0x44>)
 800038c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000390:	61d3      	str	r3, [r2, #28]
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <HAL_MspInit+0x44>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000

080003b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <NMI_Handler+0x4>

080003b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ba:	e7fe      	b.n	80003ba <HardFault_Handler+0x4>

080003bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <MemManage_Handler+0x4>

080003c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <BusFault_Handler+0x4>

080003c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <UsageFault_Handler+0x4>

080003ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr

080003ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fc:	f000 f884 	bl	8000508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <SystemInit+0x20>)
 800040a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800040e:	4a05      	ldr	r2, [pc, #20]	; (8000424 <SystemInit+0x20>)
 8000410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000ed00 	.word	0xe000ed00

08000428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000460 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <LoopForever+0x6>)
  ldr r1, =_edata
 800042e:	490e      	ldr	r1, [pc, #56]	; (8000468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000430:	4a0e      	ldr	r2, [pc, #56]	; (800046c <LoopForever+0xe>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000434:	e002      	b.n	800043c <LoopCopyDataInit>

08000436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043a:	3304      	adds	r3, #4

0800043c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800043c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000440:	d3f9      	bcc.n	8000436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000442:	4a0b      	ldr	r2, [pc, #44]	; (8000470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000444:	4c0b      	ldr	r4, [pc, #44]	; (8000474 <LoopForever+0x16>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000448:	e001      	b.n	800044e <LoopFillZerobss>

0800044a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800044c:	3204      	adds	r2, #4

0800044e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000450:	d3fb      	bcc.n	800044a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000452:	f7ff ffd7 	bl	8000404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000456:	f001 fd49 	bl	8001eec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800045a:	f7ff feb5 	bl	80001c8 <main>

0800045e <LoopForever>:

LoopForever:
    b LoopForever
 800045e:	e7fe      	b.n	800045e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000460:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000468:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800046c:	08001f94 	.word	0x08001f94
  ldr r2, =_sbss
 8000470:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000474:	2000002c 	.word	0x2000002c

08000478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000478:	e7fe      	b.n	8000478 <ADC1_2_IRQHandler>
	...

0800047c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <HAL_Init+0x28>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a07      	ldr	r2, [pc, #28]	; (80004a4 <HAL_Init+0x28>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800048c:	2003      	movs	r0, #3
 800048e:	f000 f931 	bl	80006f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000492:	200f      	movs	r0, #15
 8000494:	f000 f808 	bl	80004a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000498:	f7ff ff66 	bl	8000368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800049c:	2300      	movs	r3, #0
}
 800049e:	4618      	mov	r0, r3
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40022000 	.word	0x40022000

080004a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <HAL_InitTick+0x54>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <HAL_InitTick+0x58>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	4619      	mov	r1, r3
 80004ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004be:	fbb3 f3f1 	udiv	r3, r3, r1
 80004c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f93b 	bl	8000742 <HAL_SYSTICK_Config>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004d2:	2301      	movs	r3, #1
 80004d4:	e00e      	b.n	80004f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2b0f      	cmp	r3, #15
 80004da:	d80a      	bhi.n	80004f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004dc:	2200      	movs	r2, #0
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004e4:	f000 f911 	bl	800070a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <HAL_InitTick+0x5c>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	e000      	b.n	80004f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000008 	.word	0x20000008
 8000504:	20000004 	.word	0x20000004

08000508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_IncTick+0x20>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	461a      	mov	r2, r3
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <HAL_IncTick+0x24>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4413      	add	r3, r2
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_IncTick+0x24>)
 800051a:	6013      	str	r3, [r2, #0]
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000008 	.word	0x20000008
 800052c:	20000028 	.word	0x20000028

08000530 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return uwTick;  
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <HAL_GetTick+0x14>)
 8000536:	681b      	ldr	r3, [r3, #0]
}
 8000538:	4618      	mov	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000028 	.word	0x20000028

08000548 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000550:	f7ff ffee 	bl	8000530 <HAL_GetTick>
 8000554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000560:	d005      	beq.n	800056e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <HAL_Delay+0x44>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	461a      	mov	r2, r3
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	4413      	add	r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800056e:	bf00      	nop
 8000570:	f7ff ffde 	bl	8000530 <HAL_GetTick>
 8000574:	4602      	mov	r2, r0
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	1ad3      	subs	r3, r2, r3
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	429a      	cmp	r2, r3
 800057e:	d8f7      	bhi.n	8000570 <HAL_Delay+0x28>
  {
  }
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000008 	.word	0x20000008

08000590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c2:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	60d3      	str	r3, [r2, #12]
}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <__NVIC_GetPriorityGrouping+0x18>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	f003 0307 	and.w	r3, r3, #7
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	db0a      	blt.n	800061e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <__NVIC_SetPriority+0x4c>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061c:	e00a      	b.n	8000634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <__NVIC_SetPriority+0x50>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	3b04      	subs	r3, #4
 800062c:	0112      	lsls	r2, r2, #4
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	440b      	add	r3, r1
 8000632:	761a      	strb	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43da      	mvns	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	401a      	ands	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43d9      	mvns	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4313      	orrs	r3, r2
         );
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006c0:	d301      	bcc.n	80006c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006c2:	2301      	movs	r3, #1
 80006c4:	e00f      	b.n	80006e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c6:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <SysTick_Config+0x40>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ce:	210f      	movs	r1, #15
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006d4:	f7ff ff8e 	bl	80005f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <SysTick_Config+0x40>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <SysTick_Config+0x40>)
 80006e0:	2207      	movs	r2, #7
 80006e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	e000e010 	.word	0xe000e010

080006f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ff47 	bl	8000590 <__NVIC_SetPriorityGrouping>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b086      	sub	sp, #24
 800070e:	af00      	add	r7, sp, #0
 8000710:	4603      	mov	r3, r0
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800071c:	f7ff ff5c 	bl	80005d8 <__NVIC_GetPriorityGrouping>
 8000720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	68b9      	ldr	r1, [r7, #8]
 8000726:	6978      	ldr	r0, [r7, #20]
 8000728:	f7ff ff8e 	bl	8000648 <NVIC_EncodePriority>
 800072c:	4602      	mov	r2, r0
 800072e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff5d 	bl	80005f4 <__NVIC_SetPriority>
}
 800073a:	bf00      	nop
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ffb0 	bl	80006b0 <SysTick_Config>
 8000750:	4603      	mov	r3, r0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800075c:	b480      	push	{r7}
 800075e:	b087      	sub	sp, #28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800076a:	e14e      	b.n	8000a0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	2101      	movs	r1, #1
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	fa01 f303 	lsl.w	r3, r1, r3
 8000778:	4013      	ands	r3, r2
 800077a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b00      	cmp	r3, #0
 8000780:	f000 8140 	beq.w	8000a04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f003 0303 	and.w	r3, r3, #3
 800078c:	2b01      	cmp	r3, #1
 800078e:	d005      	beq.n	800079c <HAL_GPIO_Init+0x40>
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f003 0303 	and.w	r3, r3, #3
 8000798:	2b02      	cmp	r3, #2
 800079a:	d130      	bne.n	80007fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	2203      	movs	r2, #3
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	43db      	mvns	r3, r3
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	68da      	ldr	r2, [r3, #12]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007d2:	2201      	movs	r2, #1
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43db      	mvns	r3, r3
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	4013      	ands	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	091b      	lsrs	r3, r3, #4
 80007e8:	f003 0201 	and.w	r2, r3, #1
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	f003 0303 	and.w	r3, r3, #3
 8000806:	2b03      	cmp	r3, #3
 8000808:	d017      	beq.n	800083a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	2203      	movs	r2, #3
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	4013      	ands	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	689a      	ldr	r2, [r3, #8]
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	4313      	orrs	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f003 0303 	and.w	r3, r3, #3
 8000842:	2b02      	cmp	r3, #2
 8000844:	d123      	bne.n	800088e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	08da      	lsrs	r2, r3, #3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3208      	adds	r2, #8
 800084e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	220f      	movs	r2, #15
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	4013      	ands	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	691a      	ldr	r2, [r3, #16]
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	f003 0307 	and.w	r3, r3, #7
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4313      	orrs	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	08da      	lsrs	r2, r3, #3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3208      	adds	r2, #8
 8000888:	6939      	ldr	r1, [r7, #16]
 800088a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	2203      	movs	r2, #3
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4013      	ands	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f003 0203 	and.w	r2, r3, #3
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f000 809a 	beq.w	8000a04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d0:	4b55      	ldr	r3, [pc, #340]	; (8000a28 <HAL_GPIO_Init+0x2cc>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a54      	ldr	r2, [pc, #336]	; (8000a28 <HAL_GPIO_Init+0x2cc>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b52      	ldr	r3, [pc, #328]	; (8000a28 <HAL_GPIO_Init+0x2cc>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008e8:	4a50      	ldr	r2, [pc, #320]	; (8000a2c <HAL_GPIO_Init+0x2d0>)
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	089b      	lsrs	r3, r3, #2
 80008ee:	3302      	adds	r3, #2
 80008f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	f003 0303 	and.w	r3, r3, #3
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	220f      	movs	r2, #15
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000912:	d013      	beq.n	800093c <HAL_GPIO_Init+0x1e0>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a46      	ldr	r2, [pc, #280]	; (8000a30 <HAL_GPIO_Init+0x2d4>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d00d      	beq.n	8000938 <HAL_GPIO_Init+0x1dc>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a45      	ldr	r2, [pc, #276]	; (8000a34 <HAL_GPIO_Init+0x2d8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d007      	beq.n	8000934 <HAL_GPIO_Init+0x1d8>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a44      	ldr	r2, [pc, #272]	; (8000a38 <HAL_GPIO_Init+0x2dc>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d101      	bne.n	8000930 <HAL_GPIO_Init+0x1d4>
 800092c:	2303      	movs	r3, #3
 800092e:	e006      	b.n	800093e <HAL_GPIO_Init+0x1e2>
 8000930:	2305      	movs	r3, #5
 8000932:	e004      	b.n	800093e <HAL_GPIO_Init+0x1e2>
 8000934:	2302      	movs	r3, #2
 8000936:	e002      	b.n	800093e <HAL_GPIO_Init+0x1e2>
 8000938:	2301      	movs	r3, #1
 800093a:	e000      	b.n	800093e <HAL_GPIO_Init+0x1e2>
 800093c:	2300      	movs	r3, #0
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	f002 0203 	and.w	r2, r2, #3
 8000944:	0092      	lsls	r2, r2, #2
 8000946:	4093      	lsls	r3, r2
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4313      	orrs	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800094e:	4937      	ldr	r1, [pc, #220]	; (8000a2c <HAL_GPIO_Init+0x2d0>)
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	3302      	adds	r3, #2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800095c:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <HAL_GPIO_Init+0x2e0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	43db      	mvns	r3, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d003      	beq.n	8000980 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000980:	4a2e      	ldr	r2, [pc, #184]	; (8000a3c <HAL_GPIO_Init+0x2e0>)
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <HAL_GPIO_Init+0x2e0>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	43db      	mvns	r3, r3
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4013      	ands	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <HAL_GPIO_Init+0x2e0>)
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <HAL_GPIO_Init+0x2e0>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d003      	beq.n	80009d4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <HAL_GPIO_Init+0x2e0>)
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_GPIO_Init+0x2e0>)
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <HAL_GPIO_Init+0x2e0>)
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	3301      	adds	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	fa22 f303 	lsr.w	r3, r2, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f47f aea9 	bne.w	800076c <HAL_GPIO_Init+0x10>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	bf00      	nop
 8000a1e:	371c      	adds	r7, #28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010000 	.word	0x40010000
 8000a30:	48000400 	.word	0x48000400
 8000a34:	48000800 	.word	0x48000800
 8000a38:	48000c00 	.word	0x48000c00
 8000a3c:	40010400 	.word	0x40010400

08000a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a50:	787b      	ldrb	r3, [r7, #1]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a56:	887a      	ldrh	r2, [r7, #2]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a5c:	e002      	b.n	8000a64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a5e:	887a      	ldrh	r2, [r7, #2]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a82:	887a      	ldrh	r2, [r7, #2]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4013      	ands	r3, r2
 8000a88:	041a      	lsls	r2, r3, #16
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43d9      	mvns	r1, r3
 8000a8e:	887b      	ldrh	r3, [r7, #2]
 8000a90:	400b      	ands	r3, r1
 8000a92:	431a      	orrs	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	619a      	str	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ab0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ab4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	f001 b823 	b.w	8001b10 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 817d 	beq.w	8000dda <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ae0:	4bbc      	ldr	r3, [pc, #752]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 030c 	and.w	r3, r3, #12
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d00c      	beq.n	8000b06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aec:	4bb9      	ldr	r3, [pc, #740]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 030c 	and.w	r3, r3, #12
 8000af4:	2b08      	cmp	r3, #8
 8000af6:	d15c      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x10e>
 8000af8:	4bb6      	ldr	r3, [pc, #728]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b04:	d155      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x10e>
 8000b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b0a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000b12:	fa93 f3a3 	rbit	r3, r3
 8000b16:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b1e:	fab3 f383 	clz	r3, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	095b      	lsrs	r3, r3, #5
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d102      	bne.n	8000b38 <HAL_RCC_OscConfig+0x94>
 8000b32:	4ba8      	ldr	r3, [pc, #672]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	e015      	b.n	8000b64 <HAL_RCC_OscConfig+0xc0>
 8000b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b3c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000b44:	fa93 f3a3 	rbit	r3, r3
 8000b48:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b50:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b54:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b58:	fa93 f3a3 	rbit	r3, r3
 8000b5c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000b60:	4b9c      	ldr	r3, [pc, #624]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b68:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000b6c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b70:	fa92 f2a2 	rbit	r2, r2
 8000b74:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000b78:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000b7c:	fab2 f282 	clz	r2, r2
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	f042 0220 	orr.w	r2, r2, #32
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	f002 021f 	and.w	r2, r2, #31
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b92:	4013      	ands	r3, r2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f000 811f 	beq.w	8000dd8 <HAL_RCC_OscConfig+0x334>
 8000b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8116 	bne.w	8000dd8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	f000 bfaf 	b.w	8001b10 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc2:	d106      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x12e>
 8000bc4:	4b83      	ldr	r3, [pc, #524]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a82      	ldr	r2, [pc, #520]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e036      	b.n	8000c40 <HAL_RCC_OscConfig+0x19c>
 8000bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10c      	bne.n	8000bfc <HAL_RCC_OscConfig+0x158>
 8000be2:	4b7c      	ldr	r3, [pc, #496]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a7b      	ldr	r2, [pc, #492]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	4b79      	ldr	r3, [pc, #484]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a78      	ldr	r2, [pc, #480]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e021      	b.n	8000c40 <HAL_RCC_OscConfig+0x19c>
 8000bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c0c:	d10c      	bne.n	8000c28 <HAL_RCC_OscConfig+0x184>
 8000c0e:	4b71      	ldr	r3, [pc, #452]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a70      	ldr	r2, [pc, #448]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	4b6e      	ldr	r3, [pc, #440]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a6d      	ldr	r2, [pc, #436]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e00b      	b.n	8000c40 <HAL_RCC_OscConfig+0x19c>
 8000c28:	4b6a      	ldr	r3, [pc, #424]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a69      	ldr	r2, [pc, #420]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	4b67      	ldr	r3, [pc, #412]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a66      	ldr	r2, [pc, #408]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c40:	4b64      	ldr	r3, [pc, #400]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c44:	f023 020f 	bic.w	r2, r3, #15
 8000c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	495f      	ldr	r1, [pc, #380]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000c56:	4313      	orrs	r3, r2
 8000c58:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d059      	beq.n	8000d1e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6a:	f7ff fc61 	bl	8000530 <HAL_GetTick>
 8000c6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c72:	e00a      	b.n	8000c8a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fc5c 	bl	8000530 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b64      	cmp	r3, #100	; 0x64
 8000c82:	d902      	bls.n	8000c8a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	f000 bf43 	b.w	8001b10 <HAL_RCC_OscConfig+0x106c>
 8000c8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c8e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000c96:	fa93 f3a3 	rbit	r3, r3
 8000c9a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000c9e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	fab3 f383 	clz	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	095b      	lsrs	r3, r3, #5
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d102      	bne.n	8000cbc <HAL_RCC_OscConfig+0x218>
 8000cb6:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	e015      	b.n	8000ce8 <HAL_RCC_OscConfig+0x244>
 8000cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000cc8:	fa93 f3a3 	rbit	r3, r3
 8000ccc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000cd8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000cdc:	fa93 f3a3 	rbit	r3, r3
 8000ce0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ce4:	4b3b      	ldr	r3, [pc, #236]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000cf0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000cf4:	fa92 f2a2 	rbit	r2, r2
 8000cf8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000cfc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	f042 0220 	orr.w	r2, r2, #32
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	f002 021f 	and.w	r2, r2, #31
 8000d10:	2101      	movs	r1, #1
 8000d12:	fa01 f202 	lsl.w	r2, r1, r2
 8000d16:	4013      	ands	r3, r2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0ab      	beq.n	8000c74 <HAL_RCC_OscConfig+0x1d0>
 8000d1c:	e05d      	b.n	8000dda <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fc07 	bl	8000530 <HAL_GetTick>
 8000d22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d26:	e00a      	b.n	8000d3e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d28:	f7ff fc02 	bl	8000530 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b64      	cmp	r3, #100	; 0x64
 8000d36:	d902      	bls.n	8000d3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	f000 bee9 	b.w	8001b10 <HAL_RCC_OscConfig+0x106c>
 8000d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d42:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000d4a:	fa93 f3a3 	rbit	r3, r3
 8000d4e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000d52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d56:	fab3 f383 	clz	r3, r3
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	095b      	lsrs	r3, r3, #5
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d102      	bne.n	8000d70 <HAL_RCC_OscConfig+0x2cc>
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	e015      	b.n	8000d9c <HAL_RCC_OscConfig+0x2f8>
 8000d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d74:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d88:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000da0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000da4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000da8:	fa92 f2a2 	rbit	r2, r2
 8000dac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000db0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	f042 0220 	orr.w	r2, r2, #32
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	f002 021f 	and.w	r2, r2, #31
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1ab      	bne.n	8000d28 <HAL_RCC_OscConfig+0x284>
 8000dd0:	e003      	b.n	8000dda <HAL_RCC_OscConfig+0x336>
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 817d 	beq.w	80010ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000df0:	4ba6      	ldr	r3, [pc, #664]	; (800108c <HAL_RCC_OscConfig+0x5e8>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 030c 	and.w	r3, r3, #12
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d00b      	beq.n	8000e14 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000dfc:	4ba3      	ldr	r3, [pc, #652]	; (800108c <HAL_RCC_OscConfig+0x5e8>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b08      	cmp	r3, #8
 8000e06:	d172      	bne.n	8000eee <HAL_RCC_OscConfig+0x44a>
 8000e08:	4ba0      	ldr	r3, [pc, #640]	; (800108c <HAL_RCC_OscConfig+0x5e8>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d16c      	bne.n	8000eee <HAL_RCC_OscConfig+0x44a>
 8000e14:	2302      	movs	r3, #2
 8000e16:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000e1e:	fa93 f3a3 	rbit	r3, r3
 8000e22:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000e26:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2a:	fab3 f383 	clz	r3, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	095b      	lsrs	r3, r3, #5
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d102      	bne.n	8000e44 <HAL_RCC_OscConfig+0x3a0>
 8000e3e:	4b93      	ldr	r3, [pc, #588]	; (800108c <HAL_RCC_OscConfig+0x5e8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	e013      	b.n	8000e6c <HAL_RCC_OscConfig+0x3c8>
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000e4e:	fa93 f3a3 	rbit	r3, r3
 8000e52:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000e60:	fa93 f3a3 	rbit	r3, r3
 8000e64:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000e68:	4b88      	ldr	r3, [pc, #544]	; (800108c <HAL_RCC_OscConfig+0x5e8>)
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000e72:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e76:	fa92 f2a2 	rbit	r2, r2
 8000e7a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000e7e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000e82:	fab2 f282 	clz	r2, r2
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	f042 0220 	orr.w	r2, r2, #32
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	f002 021f 	and.w	r2, r2, #31
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f202 	lsl.w	r2, r1, r2
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00a      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x410>
 8000e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d002      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f000 be2e 	b.w	8001b10 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb4:	4b75      	ldr	r3, [pc, #468]	; (800108c <HAL_RCC_OscConfig+0x5e8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	21f8      	movs	r1, #248	; 0xf8
 8000eca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000ed2:	fa91 f1a1 	rbit	r1, r1
 8000ed6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000eda:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000ede:	fab1 f181 	clz	r1, r1
 8000ee2:	b2c9      	uxtb	r1, r1
 8000ee4:	408b      	lsls	r3, r1
 8000ee6:	4969      	ldr	r1, [pc, #420]	; (800108c <HAL_RCC_OscConfig+0x5e8>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eec:	e0fd      	b.n	80010ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8088 	beq.w	8001010 <HAL_RCC_OscConfig+0x56c>
 8000f00:	2301      	movs	r3, #1
 8000f02:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f06:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f0a:	fa93 f3a3 	rbit	r3, r3
 8000f0e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000f12:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f16:	fab3 f383 	clz	r3, r3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	461a      	mov	r2, r3
 8000f28:	2301      	movs	r3, #1
 8000f2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fb00 	bl	8000530 <HAL_GetTick>
 8000f30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f36:	f7ff fafb 	bl	8000530 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d902      	bls.n	8000f4c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	f000 bde2 	b.w	8001b10 <HAL_RCC_OscConfig+0x106c>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f52:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f56:	fa93 f3a3 	rbit	r3, r3
 8000f5a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000f5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f62:	fab3 f383 	clz	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	095b      	lsrs	r3, r3, #5
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <HAL_RCC_OscConfig+0x4d8>
 8000f76:	4b45      	ldr	r3, [pc, #276]	; (800108c <HAL_RCC_OscConfig+0x5e8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	e013      	b.n	8000fa4 <HAL_RCC_OscConfig+0x500>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	; (800108c <HAL_RCC_OscConfig+0x5e8>)
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000faa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000fae:	fa92 f2a2 	rbit	r2, r2
 8000fb2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000fb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000fba:	fab2 f282 	clz	r2, r2
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	f042 0220 	orr.w	r2, r2, #32
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	f002 021f 	and.w	r2, r2, #31
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0af      	beq.n	8000f36 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_RCC_OscConfig+0x5e8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	21f8      	movs	r1, #248	; 0xf8
 8000fec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000ff4:	fa91 f1a1 	rbit	r1, r1
 8000ff8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000ffc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001000:	fab1 f181 	clz	r1, r1
 8001004:	b2c9      	uxtb	r1, r1
 8001006:	408b      	lsls	r3, r1
 8001008:	4920      	ldr	r1, [pc, #128]	; (800108c <HAL_RCC_OscConfig+0x5e8>)
 800100a:	4313      	orrs	r3, r2
 800100c:	600b      	str	r3, [r1, #0]
 800100e:	e06c      	b.n	80010ea <HAL_RCC_OscConfig+0x646>
 8001010:	2301      	movs	r3, #1
 8001012:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001022:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001026:	fab3 f383 	clz	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001030:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	461a      	mov	r2, r3
 8001038:	2300      	movs	r3, #0
 800103a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fa78 	bl	8000530 <HAL_GetTick>
 8001040:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001044:	e00a      	b.n	800105c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff fa73 	bl	8000530 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d902      	bls.n	800105c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	f000 bd5a 	b.w	8001b10 <HAL_RCC_OscConfig+0x106c>
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001062:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001066:	fa93 f3a3 	rbit	r3, r3
 800106a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800106e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	095b      	lsrs	r3, r3, #5
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d104      	bne.n	8001090 <HAL_RCC_OscConfig+0x5ec>
 8001086:	4b01      	ldr	r3, [pc, #4]	; (800108c <HAL_RCC_OscConfig+0x5e8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	e015      	b.n	80010b8 <HAL_RCC_OscConfig+0x614>
 800108c:	40021000 	.word	0x40021000
 8001090:	2302      	movs	r3, #2
 8001092:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80010b4:	4bc8      	ldr	r3, [pc, #800]	; (80013d8 <HAL_RCC_OscConfig+0x934>)
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	2202      	movs	r2, #2
 80010ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80010be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010c2:	fa92 f2a2 	rbit	r2, r2
 80010c6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80010ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80010ce:	fab2 f282 	clz	r2, r2
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	f042 0220 	orr.w	r2, r2, #32
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	f002 021f 	and.w	r2, r2, #31
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1ad      	bne.n	8001046 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8110 	beq.w	8001320 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001104:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d079      	beq.n	8001204 <HAL_RCC_OscConfig+0x760>
 8001110:	2301      	movs	r3, #1
 8001112:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4bab      	ldr	r3, [pc, #684]	; (80013dc <HAL_RCC_OscConfig+0x938>)
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	461a      	mov	r2, r3
 8001136:	2301      	movs	r3, #1
 8001138:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff f9f9 	bl	8000530 <HAL_GetTick>
 800113e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001142:	e00a      	b.n	800115a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff f9f4 	bl	8000530 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d902      	bls.n	800115a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	f000 bcdb 	b.w	8001b10 <HAL_RCC_OscConfig+0x106c>
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001160:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800116c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001170:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001174:	2202      	movs	r2, #2
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800117c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	fa93 f2a3 	rbit	r2, r3
 8001186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001198:	2202      	movs	r2, #2
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	fa93 f2a3 	rbit	r2, r3
 80011aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b4:	4b88      	ldr	r3, [pc, #544]	; (80013d8 <HAL_RCC_OscConfig+0x934>)
 80011b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80011c0:	2102      	movs	r1, #2
 80011c2:	6019      	str	r1, [r3, #0]
 80011c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	fa93 f1a3 	rbit	r1, r3
 80011d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011da:	6019      	str	r1, [r3, #0]
  return result;
 80011dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0a0      	beq.n	8001144 <HAL_RCC_OscConfig+0x6a0>
 8001202:	e08d      	b.n	8001320 <HAL_RCC_OscConfig+0x87c>
 8001204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001208:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001214:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	fa93 f2a3 	rbit	r2, r3
 800121e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001222:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001226:	601a      	str	r2, [r3, #0]
  return result;
 8001228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800122c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001230:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	4b68      	ldr	r3, [pc, #416]	; (80013dc <HAL_RCC_OscConfig+0x938>)
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	461a      	mov	r2, r3
 8001242:	2300      	movs	r3, #0
 8001244:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001246:	f7ff f973 	bl	8000530 <HAL_GetTick>
 800124a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800124e:	e00a      	b.n	8001266 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001250:	f7ff f96e 	bl	8000530 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d902      	bls.n	8001266 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	f000 bc55 	b.w	8001b10 <HAL_RCC_OscConfig+0x106c>
 8001266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800126a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800126e:	2202      	movs	r2, #2
 8001270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001276:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	fa93 f2a3 	rbit	r2, r3
 8001280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001284:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001292:	2202      	movs	r2, #2
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800129a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	fa93 f2a3 	rbit	r2, r3
 80012a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012b6:	2202      	movs	r2, #2
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	fa93 f2a3 	rbit	r2, r3
 80012c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <HAL_RCC_OscConfig+0x934>)
 80012d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80012de:	2102      	movs	r1, #2
 80012e0:	6019      	str	r1, [r3, #0]
 80012e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	fa93 f1a3 	rbit	r1, r3
 80012f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012f8:	6019      	str	r1, [r3, #0]
  return result;
 80012fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	fab3 f383 	clz	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d197      	bne.n	8001250 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001324:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 81a1 	beq.w	8001678 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <HAL_RCC_OscConfig+0x934>)
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d116      	bne.n	8001376 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001348:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HAL_RCC_OscConfig+0x934>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <HAL_RCC_OscConfig+0x934>)
 800134e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001352:	61d3      	str	r3, [r2, #28]
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_RCC_OscConfig+0x934>)
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800135c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001360:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800136e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001370:	2301      	movs	r3, #1
 8001372:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_RCC_OscConfig+0x93c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137e:	2b00      	cmp	r3, #0
 8001380:	d11a      	bne.n	80013b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_RCC_OscConfig+0x93c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <HAL_RCC_OscConfig+0x93c>)
 8001388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138e:	f7ff f8cf 	bl	8000530 <HAL_GetTick>
 8001392:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	e009      	b.n	80013ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001398:	f7ff f8ca 	bl	8000530 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b64      	cmp	r3, #100	; 0x64
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e3b1      	b.n	8001b10 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_RCC_OscConfig+0x93c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ef      	beq.n	8001398 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d10d      	bne.n	80013e4 <HAL_RCC_OscConfig+0x940>
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_RCC_OscConfig+0x934>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4a02      	ldr	r2, [pc, #8]	; (80013d8 <HAL_RCC_OscConfig+0x934>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6213      	str	r3, [r2, #32]
 80013d4:	e03c      	b.n	8001450 <HAL_RCC_OscConfig+0x9ac>
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	10908120 	.word	0x10908120
 80013e0:	40007000 	.word	0x40007000
 80013e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10c      	bne.n	800140e <HAL_RCC_OscConfig+0x96a>
 80013f4:	4bc1      	ldr	r3, [pc, #772]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4ac0      	ldr	r2, [pc, #768]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6213      	str	r3, [r2, #32]
 8001400:	4bbe      	ldr	r3, [pc, #760]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	4abd      	ldr	r2, [pc, #756]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 8001406:	f023 0304 	bic.w	r3, r3, #4
 800140a:	6213      	str	r3, [r2, #32]
 800140c:	e020      	b.n	8001450 <HAL_RCC_OscConfig+0x9ac>
 800140e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b05      	cmp	r3, #5
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0x994>
 800141e:	4bb7      	ldr	r3, [pc, #732]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4ab6      	ldr	r2, [pc, #728]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6213      	str	r3, [r2, #32]
 800142a:	4bb4      	ldr	r3, [pc, #720]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	4ab3      	ldr	r2, [pc, #716]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6213      	str	r3, [r2, #32]
 8001436:	e00b      	b.n	8001450 <HAL_RCC_OscConfig+0x9ac>
 8001438:	4bb0      	ldr	r3, [pc, #704]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4aaf      	ldr	r2, [pc, #700]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 800143e:	f023 0301 	bic.w	r3, r3, #1
 8001442:	6213      	str	r3, [r2, #32]
 8001444:	4bad      	ldr	r3, [pc, #692]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4aac      	ldr	r2, [pc, #688]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 800144a:	f023 0304 	bic.w	r3, r3, #4
 800144e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001454:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 8081 	beq.w	8001564 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff f865 	bl	8000530 <HAL_GetTick>
 8001466:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146a:	e00b      	b.n	8001484 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7ff f860 	bl	8000530 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	f241 3288 	movw	r2, #5000	; 0x1388
 800147c:	4293      	cmp	r3, r2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e345      	b.n	8001b10 <HAL_RCC_OscConfig+0x106c>
 8001484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001488:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800148c:	2202      	movs	r2, #2
 800148e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001494:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	fa93 f2a3 	rbit	r2, r3
 800149e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80014b0:	2202      	movs	r2, #2
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	fa93 f2a3 	rbit	r2, r3
 80014c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80014ca:	601a      	str	r2, [r3, #0]
  return result;
 80014cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80014d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	095b      	lsrs	r3, r3, #5
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d102      	bne.n	80014f0 <HAL_RCC_OscConfig+0xa4c>
 80014ea:	4b84      	ldr	r3, [pc, #528]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	e013      	b.n	8001518 <HAL_RCC_OscConfig+0xa74>
 80014f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80014f8:	2202      	movs	r2, #2
 80014fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001500:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	fa93 f2a3 	rbit	r2, r3
 800150a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	4b79      	ldr	r3, [pc, #484]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800151c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001520:	2102      	movs	r1, #2
 8001522:	6011      	str	r1, [r2, #0]
 8001524:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001528:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	fa92 f1a2 	rbit	r1, r2
 8001532:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001536:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800153a:	6011      	str	r1, [r2, #0]
  return result;
 800153c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001540:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	fab2 f282 	clz	r2, r2
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	f002 021f 	and.w	r2, r2, #31
 8001556:	2101      	movs	r1, #1
 8001558:	fa01 f202 	lsl.w	r2, r1, r2
 800155c:	4013      	ands	r3, r2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d084      	beq.n	800146c <HAL_RCC_OscConfig+0x9c8>
 8001562:	e07f      	b.n	8001664 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001564:	f7fe ffe4 	bl	8000530 <HAL_GetTick>
 8001568:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156c:	e00b      	b.n	8001586 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7fe ffdf 	bl	8000530 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e2c4      	b.n	8001b10 <HAL_RCC_OscConfig+0x106c>
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800158e:	2202      	movs	r2, #2
 8001590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	fa93 f2a3 	rbit	r2, r3
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80015b2:	2202      	movs	r2, #2
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	fa93 f2a3 	rbit	r2, r3
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80015cc:	601a      	str	r2, [r3, #0]
  return result;
 80015ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80015d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d8:	fab3 f383 	clz	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d102      	bne.n	80015f2 <HAL_RCC_OscConfig+0xb4e>
 80015ec:	4b43      	ldr	r3, [pc, #268]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	e013      	b.n	800161a <HAL_RCC_OscConfig+0xb76>
 80015f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80015fa:	2202      	movs	r2, #2
 80015fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001602:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fa93 f2a3 	rbit	r2, r3
 800160c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001610:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	4b39      	ldr	r3, [pc, #228]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800161e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001622:	2102      	movs	r1, #2
 8001624:	6011      	str	r1, [r2, #0]
 8001626:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800162a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	fa92 f1a2 	rbit	r1, r2
 8001634:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001638:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800163c:	6011      	str	r1, [r2, #0]
  return result;
 800163e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001642:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	fab2 f282 	clz	r2, r2
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	f002 021f 	and.w	r2, r2, #31
 8001658:	2101      	movs	r1, #1
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d184      	bne.n	800156e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001664:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166c:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	4a22      	ldr	r2, [pc, #136]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 8001672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001676:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8242 	beq.w	8001b0e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_RCC_OscConfig+0xc58>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b08      	cmp	r3, #8
 8001694:	f000 8213 	beq.w	8001abe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	f040 8162 	bne.w	800196e <HAL_RCC_OscConfig+0xeca>
 80016aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80016b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	fa93 f2a3 	rbit	r2, r3
 80016c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80016ce:	601a      	str	r2, [r3, #0]
  return result;
 80016d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80016d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	461a      	mov	r2, r3
 80016ec:	2300      	movs	r3, #0
 80016ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7fe ff1e 	bl	8000530 <HAL_GetTick>
 80016f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f8:	e00c      	b.n	8001714 <HAL_RCC_OscConfig+0xc70>
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001700:	f7fe ff16 	bl	8000530 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e1fd      	b.n	8001b10 <HAL_RCC_OscConfig+0x106c>
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800171c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001726:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	fa93 f2a3 	rbit	r2, r3
 8001730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001734:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001738:	601a      	str	r2, [r3, #0]
  return result;
 800173a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001742:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001744:	fab3 f383 	clz	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d102      	bne.n	800175e <HAL_RCC_OscConfig+0xcba>
 8001758:	4bb0      	ldr	r3, [pc, #704]	; (8001a1c <HAL_RCC_OscConfig+0xf78>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	e027      	b.n	80017ae <HAL_RCC_OscConfig+0xd0a>
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001766:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800176a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fa93 f2a3 	rbit	r2, r3
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800178c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fa93 f2a3 	rbit	r2, r3
 80017a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	4b9c      	ldr	r3, [pc, #624]	; (8001a1c <HAL_RCC_OscConfig+0xf78>)
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017b2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80017b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017ba:	6011      	str	r1, [r2, #0]
 80017bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017c0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	fa92 f1a2 	rbit	r1, r2
 80017ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80017d2:	6011      	str	r1, [r2, #0]
  return result;
 80017d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	fab2 f282 	clz	r2, r2
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	f042 0220 	orr.w	r2, r2, #32
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	f002 021f 	and.w	r2, r2, #31
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d182      	bne.n	8001700 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_RCC_OscConfig+0xf78>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800180e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	430b      	orrs	r3, r1
 800181c:	497f      	ldr	r1, [pc, #508]	; (8001a1c <HAL_RCC_OscConfig+0xf78>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800182a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800182e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001834:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	fa93 f2a3 	rbit	r2, r3
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001846:	601a      	str	r2, [r3, #0]
  return result;
 8001848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001850:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800185c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	461a      	mov	r2, r3
 8001864:	2301      	movs	r3, #1
 8001866:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7fe fe62 	bl	8000530 <HAL_GetTick>
 800186c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001870:	e009      	b.n	8001886 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001872:	f7fe fe5d 	bl	8000530 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e144      	b.n	8001b10 <HAL_RCC_OscConfig+0x106c>
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800188e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f2a3 	rbit	r2, r3
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80018aa:	601a      	str	r2, [r3, #0]
  return result;
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80018b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	095b      	lsrs	r3, r3, #5
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d102      	bne.n	80018d0 <HAL_RCC_OscConfig+0xe2c>
 80018ca:	4b54      	ldr	r3, [pc, #336]	; (8001a1c <HAL_RCC_OscConfig+0xf78>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	e027      	b.n	8001920 <HAL_RCC_OscConfig+0xe7c>
 80018d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80018d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	fa93 f2a3 	rbit	r2, r3
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80018fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	fa93 f2a3 	rbit	r2, r3
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HAL_RCC_OscConfig+0xf78>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001924:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001928:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800192c:	6011      	str	r1, [r2, #0]
 800192e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001932:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	fa92 f1a2 	rbit	r1, r2
 800193c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001940:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001944:	6011      	str	r1, [r2, #0]
  return result;
 8001946:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800194a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	fab2 f282 	clz	r2, r2
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	f042 0220 	orr.w	r2, r2, #32
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	f002 021f 	and.w	r2, r2, #31
 8001960:	2101      	movs	r1, #1
 8001962:	fa01 f202 	lsl.w	r2, r1, r2
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d082      	beq.n	8001872 <HAL_RCC_OscConfig+0xdce>
 800196c:	e0cf      	b.n	8001b0e <HAL_RCC_OscConfig+0x106a>
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001976:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800197a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001980:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	fa93 f2a3 	rbit	r2, r3
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001992:	601a      	str	r2, [r3, #0]
  return result;
 8001994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001998:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800199c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	461a      	mov	r2, r3
 80019b0:	2300      	movs	r3, #0
 80019b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7fe fdbc 	bl	8000530 <HAL_GetTick>
 80019b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019bc:	e009      	b.n	80019d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019be:	f7fe fdb7 	bl	8000530 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e09e      	b.n	8001b10 <HAL_RCC_OscConfig+0x106c>
 80019d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80019da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	fa93 f2a3 	rbit	r2, r3
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80019f6:	601a      	str	r2, [r3, #0]
  return result;
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001a00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	095b      	lsrs	r3, r3, #5
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d104      	bne.n	8001a20 <HAL_RCC_OscConfig+0xf7c>
 8001a16:	4b01      	ldr	r3, [pc, #4]	; (8001a1c <HAL_RCC_OscConfig+0xf78>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	e029      	b.n	8001a70 <HAL_RCC_OscConfig+0xfcc>
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	fa93 f2a3 	rbit	r2, r3
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_RCC_OscConfig+0x1078>)
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a74:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001a78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a7c:	6011      	str	r1, [r2, #0]
 8001a7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a82:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	fa92 f1a2 	rbit	r1, r2
 8001a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a90:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001a94:	6011      	str	r1, [r2, #0]
  return result;
 8001a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a9a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	fab2 f282 	clz	r2, r2
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	f042 0220 	orr.w	r2, r2, #32
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	f002 021f 	and.w	r2, r2, #31
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d180      	bne.n	80019be <HAL_RCC_OscConfig+0xf1a>
 8001abc:	e027      	b.n	8001b0e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e01e      	b.n	8001b10 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_RCC_OscConfig+0x1078>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ada:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ade:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d10b      	bne.n	8001b0a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001af2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001af6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b09e      	sub	sp, #120	; 0x78
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e162      	b.n	8001dfe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b38:	4b90      	ldr	r3, [pc, #576]	; (8001d7c <HAL_RCC_ClockConfig+0x25c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d910      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b8d      	ldr	r3, [pc, #564]	; (8001d7c <HAL_RCC_ClockConfig+0x25c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 0207 	bic.w	r2, r3, #7
 8001b4e:	498b      	ldr	r1, [pc, #556]	; (8001d7c <HAL_RCC_ClockConfig+0x25c>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b89      	ldr	r3, [pc, #548]	; (8001d7c <HAL_RCC_ClockConfig+0x25c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e14a      	b.n	8001dfe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4b82      	ldr	r3, [pc, #520]	; (8001d80 <HAL_RCC_ClockConfig+0x260>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	497f      	ldr	r1, [pc, #508]	; (8001d80 <HAL_RCC_ClockConfig+0x260>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80dc 	beq.w	8001d4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d13c      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xf6>
 8001b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xa6>
 8001bc0:	4b6f      	ldr	r3, [pc, #444]	; (8001d80 <HAL_RCC_ClockConfig+0x260>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	e00f      	b.n	8001be6 <HAL_RCC_ClockConfig+0xc6>
 8001bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	667b      	str	r3, [r7, #100]	; 0x64
 8001bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd8:	663b      	str	r3, [r7, #96]	; 0x60
 8001bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001be2:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <HAL_RCC_ClockConfig+0x260>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bea:	65ba      	str	r2, [r7, #88]	; 0x58
 8001bec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bee:	fa92 f2a2 	rbit	r2, r2
 8001bf2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001bf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bf6:	fab2 f282 	clz	r2, r2
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f042 0220 	orr.w	r2, r2, #32
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f002 021f 	and.w	r2, r2, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d17b      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0f3      	b.n	8001dfe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d13c      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x178>
 8001c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d102      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x128>
 8001c42:	4b4f      	ldr	r3, [pc, #316]	; (8001d80 <HAL_RCC_ClockConfig+0x260>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	e00f      	b.n	8001c68 <HAL_RCC_ClockConfig+0x148>
 8001c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	647b      	str	r3, [r7, #68]	; 0x44
 8001c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8001c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c64:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <HAL_RCC_ClockConfig+0x260>)
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c70:	fa92 f2a2 	rbit	r2, r2
 8001c74:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c78:	fab2 f282 	clz	r2, r2
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	f042 0220 	orr.w	r2, r2, #32
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f002 021f 	and.w	r2, r2, #31
 8001c88:	2101      	movs	r1, #1
 8001c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d13a      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0b2      	b.n	8001dfe <HAL_RCC_ClockConfig+0x2de>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	095b      	lsrs	r3, r3, #5
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d102      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x1a0>
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_RCC_ClockConfig+0x260>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	e00d      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1bc>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ccc:	2302      	movs	r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_RCC_ClockConfig+0x260>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	2202      	movs	r2, #2
 8001cde:	61ba      	str	r2, [r7, #24]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	fa92 f2a2 	rbit	r2, r2
 8001ce6:	617a      	str	r2, [r7, #20]
  return result;
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	fab2 f282 	clz	r2, r2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f042 0220 	orr.w	r2, r2, #32
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f002 021f 	and.w	r2, r2, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e079      	b.n	8001dfe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCC_ClockConfig+0x260>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f023 0203 	bic.w	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	491a      	ldr	r1, [pc, #104]	; (8001d80 <HAL_RCC_ClockConfig+0x260>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d1c:	f7fe fc08 	bl	8000530 <HAL_GetTick>
 8001d20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d24:	f7fe fc04 	bl	8000530 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e061      	b.n	8001dfe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_RCC_ClockConfig+0x260>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 020c 	and.w	r2, r3, #12
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d1eb      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x25c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d214      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_RCC_ClockConfig+0x25c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 0207 	bic.w	r2, r3, #7
 8001d62:	4906      	ldr	r1, [pc, #24]	; (8001d7c <HAL_RCC_ClockConfig+0x25c>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <HAL_RCC_ClockConfig+0x25c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e040      	b.n	8001dfe <HAL_RCC_ClockConfig+0x2de>
 8001d7c:	40022000 	.word	0x40022000
 8001d80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_ClockConfig+0x2e8>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	491a      	ldr	r1, [pc, #104]	; (8001e08 <HAL_RCC_ClockConfig+0x2e8>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_RCC_ClockConfig+0x2e8>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4912      	ldr	r1, [pc, #72]	; (8001e08 <HAL_RCC_ClockConfig+0x2e8>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dc2:	f000 f829 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4601      	mov	r1, r0
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_ClockConfig+0x2e8>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd0:	22f0      	movs	r2, #240	; 0xf0
 8001dd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	fa92 f2a2 	rbit	r2, r2
 8001dda:	60fa      	str	r2, [r7, #12]
  return result;
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	fab2 f282 	clz	r2, r2
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	40d3      	lsrs	r3, r2
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x2ec>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	fa21 f303 	lsr.w	r3, r1, r3
 8001dee:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <HAL_RCC_ClockConfig+0x2f0>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_RCC_ClockConfig+0x2f4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb56 	bl	80004a8 <HAL_InitTick>
  
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3778      	adds	r7, #120	; 0x78
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	08001f5c 	.word	0x08001f5c
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b08b      	sub	sp, #44	; 0x2c
 8001e1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e32:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d002      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x30>
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x36>
 8001e46:	e03c      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e4a:	623b      	str	r3, [r7, #32]
      break;
 8001e4c:	e03c      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e54:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e58:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	fa92 f2a2 	rbit	r2, r2
 8001e60:	607a      	str	r2, [r7, #4]
  return result;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	fab2 f282 	clz	r2, r2
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	40d3      	lsrs	r3, r2
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	fa92 f2a2 	rbit	r2, r2
 8001e84:	60fa      	str	r2, [r7, #12]
  return result;
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	fab2 f282 	clz	r2, r2
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	40d3      	lsrs	r3, r2
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
 8001e94:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb0:	e004      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	623b      	str	r3, [r7, #32]
      break;
 8001ec0:	e002      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ec4:	623b      	str	r3, [r7, #32]
      break;
 8001ec6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	372c      	adds	r7, #44	; 0x2c
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	007a1200 	.word	0x007a1200
 8001ee0:	08001f6c 	.word	0x08001f6c
 8001ee4:	08001f7c 	.word	0x08001f7c
 8001ee8:	003d0900 	.word	0x003d0900

08001eec <__libc_init_array>:
 8001eec:	b570      	push	{r4, r5, r6, lr}
 8001eee:	4d0d      	ldr	r5, [pc, #52]	; (8001f24 <__libc_init_array+0x38>)
 8001ef0:	4c0d      	ldr	r4, [pc, #52]	; (8001f28 <__libc_init_array+0x3c>)
 8001ef2:	1b64      	subs	r4, r4, r5
 8001ef4:	10a4      	asrs	r4, r4, #2
 8001ef6:	2600      	movs	r6, #0
 8001ef8:	42a6      	cmp	r6, r4
 8001efa:	d109      	bne.n	8001f10 <__libc_init_array+0x24>
 8001efc:	4d0b      	ldr	r5, [pc, #44]	; (8001f2c <__libc_init_array+0x40>)
 8001efe:	4c0c      	ldr	r4, [pc, #48]	; (8001f30 <__libc_init_array+0x44>)
 8001f00:	f000 f820 	bl	8001f44 <_init>
 8001f04:	1b64      	subs	r4, r4, r5
 8001f06:	10a4      	asrs	r4, r4, #2
 8001f08:	2600      	movs	r6, #0
 8001f0a:	42a6      	cmp	r6, r4
 8001f0c:	d105      	bne.n	8001f1a <__libc_init_array+0x2e>
 8001f0e:	bd70      	pop	{r4, r5, r6, pc}
 8001f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f14:	4798      	blx	r3
 8001f16:	3601      	adds	r6, #1
 8001f18:	e7ee      	b.n	8001ef8 <__libc_init_array+0xc>
 8001f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f1e:	4798      	blx	r3
 8001f20:	3601      	adds	r6, #1
 8001f22:	e7f2      	b.n	8001f0a <__libc_init_array+0x1e>
 8001f24:	08001f8c 	.word	0x08001f8c
 8001f28:	08001f8c 	.word	0x08001f8c
 8001f2c:	08001f8c 	.word	0x08001f8c
 8001f30:	08001f90 	.word	0x08001f90

08001f34 <memset>:
 8001f34:	4402      	add	r2, r0
 8001f36:	4603      	mov	r3, r0
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d100      	bne.n	8001f3e <memset+0xa>
 8001f3c:	4770      	bx	lr
 8001f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f42:	e7f9      	b.n	8001f38 <memset+0x4>

08001f44 <_init>:
 8001f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f46:	bf00      	nop
 8001f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4a:	bc08      	pop	{r3}
 8001f4c:	469e      	mov	lr, r3
 8001f4e:	4770      	bx	lr

08001f50 <_fini>:
 8001f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f52:	bf00      	nop
 8001f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f56:	bc08      	pop	{r3}
 8001f58:	469e      	mov	lr, r3
 8001f5a:	4770      	bx	lr
